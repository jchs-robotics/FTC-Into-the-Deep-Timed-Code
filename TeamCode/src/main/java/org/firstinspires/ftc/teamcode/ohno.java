/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 */
//package org.firstinspires.ftc.teamcode;import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;import com.qualcomm.robotcore.eventloop.opmode.Disabled;import com.qualcomm.robotcore.eventloop.opmode.OpMode;import com.qualcomm.robotcore.eventloop.opmode.TeleOp;import com.qualcomm.robotcore.hardware.DcMotor;import com.qualcomm.robotcore.hardware.DcMotorSimple;import com.qualcomm.robotcore.hardware.IMU;import com.qualcomm.robotcore.hardware.Servo;import com.qualcomm.robotcore.util.ElapsedTime;import com.qualcomm.robotcore.util.Range;import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit; @TeleOp(name="Basic: Iterative OpMode", group="Iterative OpMode") @Disabled public class teleop extends OpMode { /* Declare OpMode members.*/private ElapsedTime runtime = new ElapsedTime();private DcMotor leftFrontMotor;private DcMotor leftBackMotor;private DcMotor rightFrontMotor;private DcMotor rightBackMotor;private IMU imu;private DcMotor pivotL;private DcMotor pivotR;private DcMotor telescopeL;private DcMotor telescopeR;private Servo intake;private Servo wrist1;private Servo wrist2;/*Code to run ONCE when the driver hits INIT*/@Override public void init() {telemetry.addData("Status", "Initialized");/* Initialize the hardware variables. Note that the strings used here must correspond to the names assigned during the robot configuration step on the DS or RC devices.*/leftFrontMotor  = hardwareMap.get(DcMotor.class, "left_front_drive");leftBackMotor  = hardwareMap.get(DcMotor.class, "left_back_drive");rightFrontMotor = hardwareMap.get(DcMotor.class, "right_front_drive");rightBackMotor = hardwareMap.get(DcMotor.class, "right_back_drive");leftFrontMotor.setDirection(DcMotor.Direction.REVERSE);leftBackMotor.setDirection(DcMotor.Direction.REVERSE);rightFrontMotor.setDirection(DcMotor.Direction.FORWARD);rightBackMotor.setDirection(DcMotor.Direction.FORWARD);pivotL = hardwareMap.get(DcMotor.class, "left_pivot");pivotR = hardwareMap.get(DcMotor.class, "right_pivot");telescopeL = hardwareMap.get(DcMotor.class, "left_telescope");telescopeR = hardwareMap.get(DcMotor.class, "right_telescope");pivotL.setDirection(DcMotorSimple.Direction.REVERSE);telescopeL.setDirection(DcMotorSimple.Direction.REVERSE);wrist1 = hardwareMap.get(Servo.class, "wrist_1");wrist2 = hardwareMap.get(Servo.class, "wrist_2");intake = hardwareMap.get(Servo.class, "intake");/* Retrieve the IMU from the hardware map*/IMU imu = hardwareMap.get(IMU.class, "imu");IMU.Parameters parameters = new IMU.Parameters(new RevHubOrientationOnRobot(RevHubOrientationOnRobot.LogoFacingDirection.UP, RevHubOrientationOnRobot.UsbFacingDirection.RIGHT));/* Without this, the REV Hub's orientation is assumed to be logo up / USB forward*/imu.initialize(parameters);/* Wait for the game to start (driver presses PLAY)*/telemetry.addData("Status", "Initialized");telemetry.update();}/*Code to run REPEATEDLY after the driver hits INIT, but before they hit START*/@Override public void init_loop() {}/*Code to run ONCE when the driver hits START*/@Override public void start() {runtime.reset();}/*Code to run REPEATEDLY after the driver hits START but before they hit STOP*/@Override public void loop(){/*Drive controls*//*Field centric stuff controller joystick input*/double y = -gamepad1.left_stick_y; // Remember, Y stick value is reversed*/ double x = gamepad1.left_stick_x;double rx = gamepad1.right_stick_x;/*This button choice was made so that it is hard to hit on accident,it can be freely changed based on preference.The equivalent button is start on Xbox-style controllers.*/if(gamepad1.options){imu.resetYaw();}double botHeading = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.RADIANS);/* Rotate the movement direction counter to the bot's rotation*/double rotX = x * Math.cos(-botHeading) - y * Math.sin(-botHeading);double rotY = x * Math.sin(-botHeading) + y * Math.cos(-botHeading);rotX = rotX * 1.1;  /* Counteract imperfect strafing*//* Denominator is the largest motor power (absolute value) or 1 This ensures all the powers maintain the same ratio, but only if at least one is out of the range [-1, 1]*/double denominator = Math.max(Math.abs(rotY) + Math.abs(rotX) + Math.abs(rx), 1);double frontLeftPower = (rotY + rotX + rx) / denominator;double backLeftPower = (rotY - rotX + rx) / denominator;double frontRightPower = (rotY - rotX - rx) / denominator;double backRightPower = (rotY + rotX - rx) / denominator;leftFrontMotor.setPower(frontLeftPower);leftBackMotor.setPower(backLeftPower);rightFrontMotor.setPower(frontRightPower);rightBackMotor.setPower(backRightPower);/*TURN TO POSITIONpivot stuffdo that SET_TURNING_MODE thingywhile (turning mode = encoder):then turn to encoderwhile (turning mode = manual):turn while holdingarm stuff (2 go bilda)same as pivotrun to position for bucket/stowmanual extend/retract for grabbingwrist (2 servos)intake (2 servos)*//*MANIPULATORs*//*manual pivot*/if (gamepad1.right_trigger > 0.15) { /*forward*/pivotL.setPower(0.75);pivotR.setPower(0.75);}if (gamepad1.left_trigger > 0.15) { /*backwards*/pivotL.setPower(-0.75);pivotR.setPower(-0.75);}/*manual arm*/if(gamepad1.x){/*extend*/telescopeR.setPower(0.5);telescopeL.setPower(0.5);}if(gamepad1.a){/*retract*/telescopeR.setPower(-0.5);telescopeL.setPower(-0.5);}/*manual intake*/if(gamepad1.right_bumper){/*intake*/intake.setPosition(1);}if(gamepad1.left_bumper){/*outtake*/intake.setPosition(0);}/*wrist*/if(gamepad1.y){/*wrist stow*/wrist1.setDirection(Servo.Direction.FORWARD);wrist2.setDirection(Servo.Direction.REVERSE);wrist1.setPosition(1);wrist2.setPosition(0);}if (gamepad1.b) {wrist1.setDirection(Servo.Direction.REVERSE);wrist2.setDirection(Servo.Direction.FORWARD);wrist1.setPosition(0);wrist2.setPosition(1);}}/*Code to run ONCE after the driver hits STOP*/@Override public void stop() {}}
 /* NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */








